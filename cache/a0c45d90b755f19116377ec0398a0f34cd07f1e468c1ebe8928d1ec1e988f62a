Component 1: Game Board
interface GameBoard {
  // Initializes the game board with the given pieces
  initialize(pieces: Piece[]): void;
  // Returns the current state of the game board
  getState(): BoardState;
  // Moves a piece from one position to another
  movePiece(from: Position, to: Position): void;
  // Returns the legal moves for a given piece
  getLegalMoves(piece: Piece): Position[];
  // Resets the game board to its initial state
  reset(): void;
}
%BREAK%

Component 2: Piece
interface Piece {
  // Returns the type of the piece (e.g. "pawn", "rook", etc.)
  getType(): string;
  // Returns the color of the piece ("white" or "black")
  getColor(): string;
  // Returns the current position of the piece on the board
  getPosition(): Position;
  // Sets the position of the piece on the board
  setPosition(position: Position): void;
  // Returns the graphic representation of the piece
  getGraphic(): string;
  // Sets the graphic representation of the piece
  setGraphic(graphic: string): void;
}
%BREAK%

Component 3: Piece Editor View (Browser UI)
interface PieceEditorView {
  // Initializes the piece editor view with the given piece
  initialize(piece: Piece): void;
  // Returns the current state of the piece editor view
  getState(): PieceEditorViewState;
  // Sets the code representation of the piece
  setCode(code: string): void;
  // Returns the code representation of the piece
  getCode(): string;
  // Saves the current piece to the user's library
  savePiece(): void;
  // Exports the current piece as a JSON file
  exportPiece(): void;
}
%BREAK%

Component 4: User Library
interface UserLibrary {
  // Returns a list of all the user's saved pieces
  getSavedPieces(): Piece[];
  // Deletes a saved piece from the user's library
  deletePiece(piece: Piece): void;
}
%BREAK%

Component 5: Game Proposal View (Browser UI)
interface GameProposalView {
  // Initializes the game proposal view with the given board layout and pieces
  initialize(boardLayout: BoardLayout, pieces: Piece[]): void;
  // Returns the current state of the game proposal view
  getState(): GameProposalViewState;
  // Accepts the proposed game and starts the game
  acceptGame(): void;
  // Rejects the proposed game and returns to the main menu
  rejectGame(): void;
}